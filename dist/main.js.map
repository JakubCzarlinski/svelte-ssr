{
  "version": 3,
  "sources": ["..\\rendering\\main.ts", "..\\rendering\\render.ts", "..\\rendering\\ssr.ts"],
  "sourcesContent": [
    "// @ts-ignore\nimport commandLineArgs from \"command-line-args\";\nimport { chdir, cwd } from 'node:process';\nimport { main, type Args } from \"./render.ts\";\n\n\ntype OptionDefinition = {\n  name: string;\n  type: Function;\n  alias?: string;\n  multiple?: boolean;\n  lazyMultiple?: boolean;\n  defaultOption?: boolean;\n  defaultValue?: any;\n  group?: string | string[];\n};\n\nconst optionDefinitions: OptionDefinition[] = [\n  {\n    name: \"componentPath\",\n    type: String,\n    alias: \"i\",\n    defaultValue: \"./src/lib/\",\n  },\n  {\n    name: \"compilePath\",\n    type: String,\n    alias: \"o\",\n    defaultValue: \"./compile/\",\n  },\n  {\n    name: \"tailwindConfig\",\n    type: String,\n    alias: \"t\",\n    defaultValue: \"tailwind.config.ts\",\n  },\n  {\n    name: \"clean\",\n    type: Boolean,\n    alias: \"c\",\n    defaultValue: false,\n  },\n];\n\nconst options: Args = commandLineArgs(optionDefinitions);\n\nchdir(cwd());\n\nmain(options);\n",
    "import {\n  copyFileSync,\n  Dirent,\n  existsSync,\n  mkdirSync,\n  readdirSync,\n  rmdirSync,\n  writeFile,\n} from \"fs\";\nimport { cwd } from \"node:process\";\nimport path from \"path\";\nimport type { Config } from \"tailwindcss\";\nimport {\n  compileForSsr,\n  renderCompiled,\n  setPreprocessorConfig,\n} from \"./ssr.ts\";\n\nexport type Args = {\n  componentPath: string;\n  compilePath: string;\n  tailwindConfig: string;\n  clean: boolean;\n};\n\nconst permittedExtensions = [\n  \".svelte\",\n  \".js\",\n  \".cjs\",\n  \".mjs\",\n  \".css\",\n  \".html\",\n  \".json\",\n];\n\nexport async function main({\n  componentPath,\n  compilePath,\n  tailwindConfig,\n  clean,\n}: Args) {\n  // Set the process location to where the file was called from\n  const loadConfig = new Promise((resolve: (config: Config) => void) => {\n    import(path.join(cwd(), tailwindConfig)).then((config) => {\n      resolve(config.default as Config);\n    });\n  });\n\n  if (!existsSync(compilePath)) {\n    mkdirSync(compilePath, { recursive: true });\n  } else if (clean) {\n    rmdirSync(compilePath, { recursive: true });\n    mkdirSync(compilePath, { recursive: true });\n  }\n\n  const filesOrDirs: Dirent[] = readdirSync(componentPath, {\n    recursive: true,\n    withFileTypes: true,\n  });\n  const files = findFiles(filesOrDirs, componentPath);\n  const svelteFiles = [];\n\n  // Find svelte files and copy other files to the output directory\n  const fileCopies: Promise<any>[] = [];\n  for (const file of files) {\n    const directory = path.dirname(file);\n    if (directory !== \".\") {\n      const dirPath = path.join(compilePath, directory);\n      if (!existsSync(dirPath)) {\n        mkdirSync(dirPath, { recursive: true });\n      }\n    }\n    if (file.endsWith(\".svelte\")) {\n      svelteFiles.push(file);\n      continue;\n    }\n    fileCopies.push(\n      new Promise((resolve) => {\n        copyFileSync(`${componentPath}${file}`, `${compilePath}${file}`);\n        resolve(true);\n      }),\n    );\n  }\n  await Promise.all(fileCopies);\n\n  setPreprocessorConfig(await loadConfig);\n\n  await compileAll(svelteFiles, componentPath, compilePath);\n  await renderAll(svelteFiles, compilePath);\n}\n\nfunction renderAll(svelteFiles: string[], compilePath: string) {\n  const promiseArray: Promise<void>[] = [];\n  for (let i = 0; i < svelteFiles.length; i++) {\n    const outfileWithoutExt = compilePath + svelteFiles[i].split(\".\")[0];\n    promiseArray.push(\n      renderCompiled(outfileWithoutExt + \".js\").then((rendered) => {\n        writeFile(outfileWithoutExt + \".html\", rendered.html, () => {});\n        writeFile(outfileWithoutExt + \".head\", rendered.head, () => {});\n      }),\n    );\n  }\n  return Promise.all(promiseArray);\n}\n\nfunction compileAll(\n  svelteFiles: string[],\n  componentPath: string,\n  compilePath: string,\n) {\n  const promiseArray: Promise<any>[] = [];\n  for (let i = 0; i < svelteFiles.length; i++) {\n    const file = svelteFiles[i];\n    const filenameWitoutExt = file.split(\".\")[0];\n    const filePath = componentPath + file;\n    const outFilename = compilePath + filenameWitoutExt + \".js\";\n    promiseArray.push(compileForSsr(filePath, outFilename, true, compilePath));\n  }\n  return Promise.all(promiseArray);\n}\n\nfunction findFiles(filesOrDirs: Dirent[], componentPath: string) {\n  let file = \"\";\n  let dir = \"\";\n  let joined = \"\";\n\n  const files = [];\n  for (let i = 0; i < filesOrDirs.length; i++) {\n    const dirEntry = filesOrDirs[i];\n    if (!dirEntry.isFile()) {\n      continue;\n    }\n\n    for (const ext of permittedExtensions) {\n      if (!dirEntry.name.endsWith(ext)) {\n        continue;\n      }\n\n      // Remove src/lib/ prefix\n      dir = dirEntry.parentPath\n        .replaceAll(path.sep, path.posix.sep)\n        .replaceAll(componentPath.slice(2, -1), \"\");\n\n      file = dirEntry.name.replaceAll(path.sep, path.posix.sep);\n      if (file.startsWith(\"/\")) {\n        file = file.slice(1);\n      }\n\n      joined = path.join(dir, file).replaceAll(path.sep, path.posix.sep);\n      if (joined.startsWith(\"/\")) {\n        joined = joined.slice(1);\n      }\n      files.push(joined);\n      break;\n    }\n  }\n\n  return files;\n}\n",
    "import { compileSvelte } from \"@/rendering/compile.ts\";\nimport { removeCSR } from \"@/rendering/filter.ts\";\nimport purgecss from \"@fullhuman/postcss-purgecss\";\nimport resolve from \"@rollup/plugin-node-resolve\";\nimport { svelte, vitePreprocess } from \"@sveltejs/vite-plugin-svelte\";\nimport autoprefixer from \"autoprefixer\";\nimport { readFileSync, writeFile } from \"fs\";\nimport path from \"path\";\nimport {\n  preprocess,\n  type CompileResult,\n  type PreprocessorGroup,\n  type Processed,\n} from \"svelte/compiler\";\nimport { render } from \"svelte/server\";\nimport type { Config } from \"tailwindcss\";\nimport tailwindcss from \"tailwindcss\";\nimport { defineConfig, type Plugin } from \"vite\";\n\nconst svelteConfig = svelte({\n  compilerOptions: { modernAst: true },\n  prebundleSvelteLibraries: true,\n});\n\nlet preprocessorConfig: PreprocessorGroup[] | null = null;\n\nfunction getPreprocessorConfig(tailwindConfig?: Config) {\n  if (preprocessorConfig) {\n    return preprocessorConfig;\n  } else if (tailwindConfig) {\n    return setPreprocessorConfig(tailwindConfig);\n  } else {\n    throw new Error(\"Preprocessor config not set\");\n  }\n}\n\nexport function setPreprocessorConfig(tailwindConfig?: Config) {\n  return (preprocessorConfig = [\n    removeCSR(),\n    vitePreprocess({\n      style: defineConfig({\n        plugins: [svelteConfig, purgecss({}) as unknown as Plugin],\n        css: {\n          postcss: {\n            plugins: [tailwindcss(tailwindConfig), autoprefixer()],\n          },\n        },\n        resolve: {\n          alias: {\n            \"@\": path.resolve(__dirname, \"./\"),\n          },\n        },\n        build: {\n          commonjsOptions: {\n            include: [/linked-dep/, /node_modules/],\n          },\n          ssr: true,\n          rollupOptions: {\n            input: `./index.html`,\n            output: {\n              entryFileNames: `assets/[name].js`,\n              chunkFileNames: `assets/[name].js`,\n              assetFileNames: `assets/[name].[ext]`,\n            },\n            plugins: [\n              resolve({\n                browser: true,\n                exportConditions: [\"svelte\"],\n                extensions: [\".svelte\"],\n              }),\n            ],\n          },\n        },\n      }),\n    }),\n  ]);\n}\n\nconst svelteHeadTagRegex = /<svelte:head>([\\s\\S]*?)<\\/svelte:head>/;\n\nexport async function compileForSsr(\n  inPath: string,\n  outPath: string,\n  addLinkTag: boolean,\n  compilePath: string,\n) {\n  let originalSource = readFileSync(inPath, \"utf8\");\n\n  if (addLinkTag) {\n    const headTag = originalSource.match(svelteHeadTagRegex);\n    const linkTag = `<link rel=\"modulepreload\" as=\"script\" href=\"/assets/${path.basename(\n      outPath,\n    )}\"/>`;\n    if (headTag) {\n      originalSource = originalSource.replace(\n        headTag[0],\n        `${headTag[0]}\\n${linkTag}`,\n      );\n    } else {\n      originalSource = originalSource.concat(\n        `<svelte:head>${linkTag}</svelte:head>`,\n      );\n    }\n  }\n\n  const localFilename = path.basename(inPath);\n  const { code }: Processed = await preprocess(\n    originalSource,\n    getPreprocessorConfig(),\n    { filename: localFilename },\n  );\n\n  const { js }: CompileResult = compileSvelte(\n    code,\n    {\n      filename: localFilename,\n      generate: \"ssr\",\n      dev: false,\n      discloseVersion: false,\n      modernAst: true,\n    },\n    outPath.replace(compilePath, \"\"),\n  );\n\n  await writeFile(outPath, js.code, () => {});\n}\n\nconst headTagRegex = /<[^>]+>/g;\nconst htmlCommentRegex = /<!--[\\s\\S]*?-->/g;\n\nexport async function renderCompiled(jsFile: string) {\n  const Component = (await import(path.join(process.cwd(), jsFile))).default;\n  // TODO(czarlinski): maybe use injected https://svelte-5-preview.vercel.app/docs/breaking-changes\n  const rendered: {\n    html: string;\n    head: string;\n  } = render(Component, {});\n\n  rendered.head = rendered.head.replaceAll(htmlCommentRegex, \"\");\n\n  const headTags: Set<string> = new Set();\n  let match;\n  while ((match = headTagRegex.exec(rendered.head))) {\n    headTags.add(match[0]);\n  }\n  rendered.head = Array.from(headTags).join(\"\\n\");\n\n  return rendered;\n}\n"
  ],
  "mappings": "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",
  "debugId": "FEE6C854D0FE31ED64756E2164756E21",
  "names": []
}